/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@1password.com
 * Generated by: https://openapi-generator.tech
 */

/// `ApiRequest` : Represents a request that was made to the API. Including what Token was used and what resource was accessed.
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ApiRequest {
    /// The unique id used to identify a single request.
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The time at which the request was processed by the server.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    #[serde(rename = "result", skip_serializing_if = "Option::is_none")]
    pub result: Option<Result>,
    #[serde(rename = "actor", skip_serializing_if = "Option::is_none")]
    pub actor: Option<Box<crate::raw::models::ApiRequestActor>>,
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<Box<crate::raw::models::ApiRequestResource>>,
}

impl ApiRequest {
    /// Represents a request that was made to the API. Including what Token was used and what resource was accessed.
    pub fn new() -> ApiRequest {
        ApiRequest {
            request_id: None,
            timestamp: None,
            action: None,
            result: None,
            actor: None,
            resource: None,
        }
    }
}

///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
#[allow(clippy::upper_case_acronyms)]
pub enum Action {
    #[serde(rename = "READ")]
    READ,
    #[serde(rename = "CREATE")]
    CREATE,
    #[serde(rename = "UPDATE")]
    UPDATE,
    #[serde(rename = "DELETE")]
    DELETE,
}

impl Default for Action {
    fn default() -> Action {
        Self::READ
    }
}

///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
#[allow(clippy::upper_case_acronyms)]
pub enum Result {
    #[serde(rename = "SUCCESS")]
    SUCCESS,
    #[serde(rename = "DENY")]
    DENY,
}

impl Default for Result {
    fn default() -> Result {
        Self::SUCCESS
    }
}
