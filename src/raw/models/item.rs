/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: support@1password.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Item {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "vault")]
    pub vault: Box<crate::raw::models::ItemVault>,
    #[serde(rename = "category")]
    pub category: Category,
    #[serde(rename = "urls", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Vec<crate::raw::models::ItemUrls>>,
    #[serde(rename = "favorite", skip_serializing_if = "Option::is_none")]
    pub favorite: Option<bool>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "lastEditedBy", skip_serializing_if = "Option::is_none")]
    pub last_edited_by: Option<String>,
}

impl Item {
    pub fn new(
        vault: crate::raw::models::ItemVault,
        category: Category,
    ) -> Item {
        Item {
            id: None,
            title: None,
            vault: Box::new(vault),
            category,
            urls: None,
            favorite: None,
            tags: None,
            version: None,
            state: None,
            created_at: None,
            updated_at: None,
            last_edited_by: None,
        }
    }
}

///
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
#[allow(clippy::upper_case_acronyms)]
pub enum Category {
    #[serde(rename = "LOGIN")]
    LOGIN,
    #[serde(rename = "PASSWORD")]
    PASSWORD,
    #[serde(rename = "API_CREDENTIAL")]
    APICREDENTIAL,
    #[serde(rename = "SERVER")]
    SERVER,
    #[serde(rename = "DATABASE")]
    DATABASE,
    #[serde(rename = "CREDIT_CARD")]
    CREDITCARD,
    #[serde(rename = "MEMBERSHIP")]
    MEMBERSHIP,
    #[serde(rename = "PASSPORT")]
    PASSPORT,
    #[serde(rename = "SOFTWARE_LICENSE")]
    SOFTWARELICENSE,
    #[serde(rename = "OUTDOOR_LICENSE")]
    OUTDOORLICENSE,
    #[serde(rename = "SECURE_NOTE")]
    SECURENOTE,
    #[serde(rename = "WIRELESS_ROUTER")]
    WIRELESSROUTER,
    #[serde(rename = "BANK_ACCOUNT")]
    BANKACCOUNT,
    #[serde(rename = "DRIVER_LICENSE")]
    DRIVERLICENSE,
    #[serde(rename = "IDENTITY")]
    IDENTITY,
    #[serde(rename = "REWARD_PROGRAM")]
    REWARDPROGRAM,
    #[serde(rename = "DOCUMENT")]
    DOCUMENT,
    #[serde(rename = "EMAIL_ACCOUNT")]
    EMAILACCOUNT,
    #[serde(rename = "SOCIAL_SECURITY_NUMBER")]
    SOCIALSECURITYNUMBER,
    #[serde(rename = "CUSTOM")]
    CUSTOM,
}

impl Default for Category {
    fn default() -> Category {
        Self::LOGIN
    }
}

#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
)]
#[allow(clippy::upper_case_acronyms)]
pub enum State {
    #[serde(rename = "ARCHIVED")]
    ARCHIVED,
    #[serde(rename = "DELETED")]
    DELETED,
}

impl Default for State {
    fn default() -> State {
        Self::ARCHIVED
    }
}
